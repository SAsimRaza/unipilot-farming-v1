/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOracleInterface extends ethers.utils.Interface {
  functions: {
    "assetToEth(address,uint24,uint256)": FunctionFragment;
    "checkPairsAndLiquidity(address)": FunctionFragment;
    "checkPoolValidation(address,address,uint256,uint256)": FunctionFragment;
    "checkWethPairsAndLiquidity(address)": FunctionFragment;
    "ethToAsset(address,uint24,uint256)": FunctionFragment;
    "getPilotAmount(address,uint256)": FunctionFragment;
    "getPilotAmountForTokens(address,address,uint256,uint256)": FunctionFragment;
    "getPilotAmountWethPair(address,uint256,uint256)": FunctionFragment;
    "getPrice(address,address,uint24,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assetToEth",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPairsAndLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPoolValidation",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkWethPairsAndLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToAsset",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmountForTokens",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPilotAmountWethPair",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "assetToEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPairsAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPoolValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkWethPairsAndLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethToAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmountForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPilotAmountWethPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;

  events: {};
}

export class IOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOracleInterface;

  functions: {
    assetToEth(
      token: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ethAmountOut: BigNumber }>;

    checkPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkPoolValidation(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { claimPilot: boolean }>;

    checkWethPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ethToAsset(
      tokenOut: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pilotAmount: BigNumber }>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getPrice(
      tokenA: string,
      tokenB: string,
      _poolFee: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;
  };

  assetToEth(
    token: string,
    fees: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkPairsAndLiquidity(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  checkPoolValidation(
    token0: string,
    token1: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkWethPairsAndLiquidity(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  ethToAsset(
    tokenOut: string,
    fees: BigNumberish,
    amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPilotAmount(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPilotAmountForTokens(
    token0: string,
    token1: string,
    amount0: BigNumberish,
    amount1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPilotAmountWethPair(
    tokenAlt: string,
    altAmount: BigNumberish,
    wethAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    tokenA: string,
    tokenB: string,
    _poolFee: BigNumberish,
    _amountIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    assetToEth(
      token: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    checkPoolValidation(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkWethPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    ethToAsset(
      tokenOut: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      tokenA: string,
      tokenB: string,
      _poolFee: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    assetToEth(
      token: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPoolValidation(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkWethPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToAsset(
      tokenOut: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      tokenA: string,
      tokenB: string,
      _poolFee: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetToEth(
      token: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPoolValidation(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkWethPairsAndLiquidity(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethToAsset(
      tokenOut: string,
      fees: BigNumberish,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPilotAmount(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPilotAmountForTokens(
      token0: string,
      token1: string,
      amount0: BigNumberish,
      amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPilotAmountWethPair(
      tokenAlt: string,
      altAmount: BigNumberish,
      wethAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      tokenA: string,
      tokenB: string,
      _poolFee: BigNumberish,
      _amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

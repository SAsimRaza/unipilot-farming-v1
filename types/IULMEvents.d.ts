/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IULMEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Collect(uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Deposited(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolCreated(address,address,address,uint24,uint160)": EventFragment;
    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolReajusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type CollectEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
    tokenId: BigNumber;
    userAmount0: BigNumber;
    userAmount1: BigNumber;
    pilotAmount: BigNumber;
    pool: string;
    recipient: string;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    liquidity: BigNumber;
  }
>;

export type PoolCreatedEvent = TypedEvent<
  [string, string, string, number, BigNumber] & {
    token0: string;
    token1: string;
    pool: string;
    fee: number;
    sqrtPriceX96: BigNumber;
  }
>;

export type PoolReajustedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, number, number, number] & {
    pool: string;
    baseLiquidity: BigNumber;
    rangeLiquidity: BigNumber;
    newBaseTickLower: number;
    newBaseTickUpper: number;
    newRangeTickLower: number;
    newRangeTickUpper: number;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    recipient: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export class IULMEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IULMEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Collect(uint256,uint256,uint256,uint256,address,address)"(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        tokenId: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
        pilotAmount: BigNumber;
        pool: string;
        recipient: string;
      }
    >;

    Collect(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        tokenId: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
        pilotAmount: BigNumber;
        pool: string;
        recipient: string;
      }
    >;

    "Deposited(address,uint256,uint256,uint256,uint256)"(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity: BigNumber;
      }
    >;

    Deposited(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "PoolCreated(address,address,address,uint24,uint160)"(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        token0: string;
        token1: string;
        pool: string;
        fee: number;
        sqrtPriceX96: BigNumber;
      }
    >;

    PoolCreated(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        token0: string;
        token1: string;
        pool: string;
        fee: number;
        sqrtPriceX96: BigNumber;
      }
    >;

    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)"(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, number, number, number],
      {
        pool: string;
        baseLiquidity: BigNumber;
        rangeLiquidity: BigNumber;
        newBaseTickLower: number;
        newBaseTickUpper: number;
        newRangeTickLower: number;
        newRangeTickUpper: number;
      }
    >;

    PoolReajusted(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, number, number, number],
      {
        pool: string;
        baseLiquidity: BigNumber;
        rangeLiquidity: BigNumber;
        newBaseTickLower: number;
        newBaseTickUpper: number;
        newRangeTickLower: number;
        newRangeTickUpper: number;
      }
    >;

    "Withdrawn(address,address,uint256,uint256,uint256)"(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        recipient: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Withdrawn(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        recipient: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}

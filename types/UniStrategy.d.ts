/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniStrategyInterface extends ethers.utils.Interface {
  functions: {
    "baseMultiplier()": FunctionFragment;
    "changeStrategy((int24,int24,int24,uint32),address)": FunctionFragment;
    "getTicks(address)": FunctionFragment;
    "getTwap(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "pricethreshold()": FunctionFragment;
    "rangeMultiplier()": FunctionFragment;
    "setBaseMutiplier(int24)": FunctionFragment;
    "setMaxTwapDeviation(int24)": FunctionFragment;
    "setPricethreshold(uint16)": FunctionFragment;
    "setRangeMultiplier(int24)": FunctionFragment;
    "setTwapDuration(uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeStrategy",
    values: [
      {
        baseThreshold: BigNumberish;
        rangeMultiplier: BigNumberish;
        maxTwapDeviation: BigNumberish;
        twapDuration: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "getTicks", values: [string]): string;
  encodeFunctionData(functionFragment: "getTwap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricethreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseMutiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTwapDeviation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricethreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRangeMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTwapDuration",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricethreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseMutiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTwapDeviation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPricethreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRangeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTwapDuration",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniStrategyInterface;

  functions: {
    baseMultiplier(overrides?: CallOverrides): Promise<[number]>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeMultiplier: BigNumberish;
        maxTwapDeviation: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<[number]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    pricethreshold(overrides?: CallOverrides): Promise<[number]>;

    rangeMultiplier(overrides?: CallOverrides): Promise<[number]>;

    setBaseMutiplier(
      _baseMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricethreshold(
      _priceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRangeMultiplier(
      _rangeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  baseMultiplier(overrides?: CallOverrides): Promise<number>;

  changeStrategy(
    params: {
      baseThreshold: BigNumberish;
      rangeMultiplier: BigNumberish;
      maxTwapDeviation: BigNumberish;
      twapDuration: BigNumberish;
    },
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTicks(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;

  governance(overrides?: CallOverrides): Promise<string>;

  pricethreshold(overrides?: CallOverrides): Promise<number>;

  rangeMultiplier(overrides?: CallOverrides): Promise<number>;

  setBaseMutiplier(
    _baseMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTwapDeviation(
    _twapDeviation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricethreshold(
    _priceThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRangeMultiplier(
    _rangeMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTwapDuration(
    _twapDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    baseMultiplier(overrides?: CallOverrides): Promise<number>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeMultiplier: BigNumberish;
        maxTwapDeviation: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTicks(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, number, number] & {
        baseLower: number;
        baseUpper: number;
        bidLower: number;
        bidUpper: number;
        askLower: number;
        askUpper: number;
      }
    >;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<number>;

    governance(overrides?: CallOverrides): Promise<string>;

    pricethreshold(overrides?: CallOverrides): Promise<number>;

    rangeMultiplier(overrides?: CallOverrides): Promise<number>;

    setBaseMutiplier(
      _baseMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricethreshold(
      _priceThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRangeMultiplier(
      _rangeMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    baseMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeMultiplier: BigNumberish;
        maxTwapDeviation: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTwap(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    pricethreshold(overrides?: CallOverrides): Promise<BigNumber>;

    rangeMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseMutiplier(
      _baseMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricethreshold(
      _priceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRangeMultiplier(
      _rangeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeStrategy(
      params: {
        baseThreshold: BigNumberish;
        rangeMultiplier: BigNumberish;
        maxTwapDeviation: BigNumberish;
        twapDuration: BigNumberish;
      },
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTicks(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTwap(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricethreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rangeMultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseMutiplier(
      _baseMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTwapDeviation(
      _twapDeviation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricethreshold(
      _priceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRangeMultiplier(
      _rangeMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTwapDuration(
      _twapDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UniswapLiquidityManagerInterface extends ethers.utils.Interface {
  functions: {
    "addressToNftId(address,address)": FunctionFragment;
    "collect(bool,bool,uint256,bytes)": FunctionFragment;
    "createPair(address,address,bytes)": FunctionFragment;
    "deposit(address,address,address,uint256,uint256,uint256,bytes)": FunctionFragment;
    "getReserves(address,address,bytes)": FunctionFragment;
    "getTotalAmounts(address)": FunctionFragment;
    "getUserFees(uint256)": FunctionFragment;
    "liquidityPositions(address)": FunctionFragment;
    "positions(uint256)": FunctionFragment;
    "readjustFrequencyStatus(address)": FunctionFragment;
    "readjustLiquidity(address,address,uint24)": FunctionFragment;
    "setPilotProtocolDetails(address,uint8,bool)": FunctionFragment;
    "toggleFeesInPilot(address)": FunctionFragment;
    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "updateCoreAddresses(address,address,address,address)": FunctionFragment;
    "updateNewPremium(uint256)": FunctionFragment;
    "updatePositionTotalAmounts(address)": FunctionFragment;
    "withdraw(bool,bool,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressToNftId",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [boolean, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readjustFrequencyStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "readjustLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPilotProtocolDetails",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFeesInPilot",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoreAddresses",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNewPremium",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePositionTotalAmounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [boolean, boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressToNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readjustFrequencyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readjustLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPilotProtocolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleFeesInPilot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCoreAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNewPremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePositionTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Collect(uint256,uint256,uint256,uint256,uint256,uint256,address,address)": EventFragment;
    "Deposited(address,uint256,uint256,uint256,uint256)": EventFragment;
    "PoolCreated(address,address,address,uint24,uint160)": EventFragment;
    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)": EventFragment;
    "Withdrawn(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolReajusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type CollectEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    tokenId: BigNumber;
    userAmount0: BigNumber;
    userAmount1: BigNumber;
    indexAmount0: BigNumber;
    indexAmount1: BigNumber;
    pilotAmount: BigNumber;
    pool: string;
    recipient: string;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
    liquidity: BigNumber;
  }
>;

export type PoolCreatedEvent = TypedEvent<
  [string, string, string, number, BigNumber] & {
    token0: string;
    token1: string;
    pool: string;
    fee: number;
    sqrtPriceX96: BigNumber;
  }
>;

export type PoolReajustedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, number, number, number] & {
    pool: string;
    baseLiquidity: BigNumber;
    rangeLiquidity: BigNumber;
    newBaseTickLower: number;
    newBaseTickUpper: number;
    newRangeTickLower: number;
    newRangeTickUpper: number;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    recipient: string;
    tokenId: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export class UniswapLiquidityManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UniswapLiquidityManagerInterface;

  functions: {
    addressToNftId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collect(
      pilotToken: boolean,
      wethToken: boolean,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPair(
      _token0: string,
      _token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      token0: string,
      token1: string,
      sender: string,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      shares: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReserves(
      token0: string,
      token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTotalAmounts(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        fee0: BigNumber;
        fee1: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    getUserFees(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        baseTickLower: number;
        baseTickUpper: number;
        baseLiquidity: BigNumber;
        rangeTickLower: number;
        rangeTickUpper: number;
        rangeLiquidity: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nonce: BigNumber;
        pool: string;
        liquidity: BigNumber;
        feeGrowth0: BigNumber;
        feeGrowth1: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;

    readjustFrequencyStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readjustLiquidity(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPilotProtocolDetails(
      _recipient: string,
      _pilotPercentage: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleFeesInPilot(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCoreAddresses(
      oracle_: string,
      ulmState_: string,
      indexFund_: string,
      uniStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateNewPremium(
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePositionTotalAmounts(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      pilotToken: boolean,
      wethToken: boolean,
      liquidity: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressToNftId(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collect(
    pilotToken: boolean,
    wethToken: boolean,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPair(
    _token0: string,
    _token1: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    token0: string,
    token1: string,
    sender: string,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    shares: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReserves(
    token0: string,
    token1: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTotalAmounts(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      fee0: BigNumber;
      fee1: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      totalLiquidity: BigNumber;
    }
  >;

  getUserFees(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityPositions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      baseTickLower: number;
      baseTickUpper: number;
      baseLiquidity: BigNumber;
      rangeTickLower: number;
      rangeTickUpper: number;
      rangeLiquidity: BigNumber;
      fees0: BigNumber;
      fees1: BigNumber;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
      totalLiquidity: BigNumber;
    }
  >;

  positions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nonce: BigNumber;
      pool: string;
      liquidity: BigNumber;
      feeGrowth0: BigNumber;
      feeGrowth1: BigNumber;
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
    }
  >;

  readjustFrequencyStatus(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readjustLiquidity(
    token0: string,
    token1: string,
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPilotProtocolDetails(
    _recipient: string,
    _pilotPercentage: BigNumberish,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleFeesInPilot(
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3MintCallback(
    amount0Owed: BigNumberish,
    amount1Owed: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCoreAddresses(
    oracle_: string,
    ulmState_: string,
    indexFund_: string,
    uniStrategy_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateNewPremium(
    _premium: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePositionTotalAmounts(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    pilotToken: boolean,
    wethToken: boolean,
    liquidity: BigNumberish,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressToNftId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      pilotToken: boolean,
      wethToken: boolean,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createPair(
      _token0: string,
      _token1: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      token0: string,
      token1: string,
      sender: string,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      shares: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0Base: BigNumber;
        amount1Base: BigNumber;
        amount0Range: BigNumber;
        amount1Range: BigNumber;
        mintedTokenId: BigNumber;
      }
    >;

    getReserves(
      token0: string,
      token1: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalAmount0: BigNumber;
        totalAmount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    getTotalAmounts(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        fee0: BigNumber;
        fee1: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    getUserFees(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { fees0: BigNumber; fees1: BigNumber }>;

    liquidityPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        baseTickLower: number;
        baseTickUpper: number;
        baseLiquidity: BigNumber;
        rangeTickLower: number;
        rangeTickUpper: number;
        rangeLiquidity: BigNumber;
        fees0: BigNumber;
        fees1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nonce: BigNumber;
        pool: string;
        liquidity: BigNumber;
        feeGrowth0: BigNumber;
        feeGrowth1: BigNumber;
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
      }
    >;

    readjustFrequencyStatus(
      pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    readjustLiquidity(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPilotProtocolDetails(
      _recipient: string,
      _pilotPercentage: BigNumberish,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleFeesInPilot(pool: string, overrides?: CallOverrides): Promise<void>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoreAddresses(
      oracle_: string,
      ulmState_: string,
      indexFund_: string,
      uniStrategy_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNewPremium(
      _premium: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePositionTotalAmounts(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        fee0: BigNumber;
        fee1: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    withdraw(
      pilotToken: boolean,
      wethToken: boolean,
      liquidity: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Collect(uint256,uint256,uint256,uint256,uint256,uint256,address,address)"(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      indexAmount0?: null,
      indexAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        tokenId: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
        indexAmount0: BigNumber;
        indexAmount1: BigNumber;
        pilotAmount: BigNumber;
        pool: string;
        recipient: string;
      }
    >;

    Collect(
      tokenId?: null,
      userAmount0?: null,
      userAmount1?: null,
      indexAmount0?: null,
      indexAmount1?: null,
      pilotAmount?: null,
      pool?: null,
      recipient?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        tokenId: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
        indexAmount0: BigNumber;
        indexAmount1: BigNumber;
        pilotAmount: BigNumber;
        pool: string;
        recipient: string;
      }
    >;

    "Deposited(address,uint256,uint256,uint256,uint256)"(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity: BigNumber;
      }
    >;

    Deposited(
      pool?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        liquidity: BigNumber;
      }
    >;

    "PoolCreated(address,address,address,uint24,uint160)"(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        token0: string;
        token1: string;
        pool: string;
        fee: number;
        sqrtPriceX96: BigNumber;
      }
    >;

    PoolCreated(
      token0?: string | null,
      token1?: string | null,
      pool?: string | null,
      fee?: null,
      sqrtPriceX96?: null
    ): TypedEventFilter<
      [string, string, string, number, BigNumber],
      {
        token0: string;
        token1: string;
        pool: string;
        fee: number;
        sqrtPriceX96: BigNumber;
      }
    >;

    "PoolReajusted(address,uint128,uint128,int24,int24,int24,int24)"(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, number, number, number],
      {
        pool: string;
        baseLiquidity: BigNumber;
        rangeLiquidity: BigNumber;
        newBaseTickLower: number;
        newBaseTickUpper: number;
        newRangeTickLower: number;
        newRangeTickUpper: number;
      }
    >;

    PoolReajusted(
      pool?: null,
      baseLiquidity?: null,
      rangeLiquidity?: null,
      newBaseTickLower?: null,
      newBaseTickUpper?: null,
      newRangeTickLower?: null,
      newRangeTickUpper?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, number, number, number, number],
      {
        pool: string;
        baseLiquidity: BigNumber;
        rangeLiquidity: BigNumber;
        newBaseTickLower: number;
        newBaseTickUpper: number;
        newRangeTickLower: number;
        newRangeTickUpper: number;
      }
    >;

    "Withdrawn(address,address,uint256,uint256,uint256)"(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        recipient: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Withdrawn(
      pool?: string | null,
      recipient?: string | null,
      tokenId?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        pool: string;
        recipient: string;
        tokenId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  estimateGas: {
    addressToNftId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collect(
      pilotToken: boolean,
      wethToken: boolean,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPair(
      _token0: string,
      _token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      token0: string,
      token1: string,
      sender: string,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      shares: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReserves(
      token0: string,
      token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTotalAmounts(
      pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserFees(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readjustFrequencyStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readjustLiquidity(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPilotProtocolDetails(
      _recipient: string,
      _pilotPercentage: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleFeesInPilot(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCoreAddresses(
      oracle_: string,
      ulmState_: string,
      indexFund_: string,
      uniStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateNewPremium(
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePositionTotalAmounts(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      pilotToken: boolean,
      wethToken: boolean,
      liquidity: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressToNftId(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      pilotToken: boolean,
      wethToken: boolean,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPair(
      _token0: string,
      _token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      token0: string,
      token1: string,
      sender: string,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      shares: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReserves(
      token0: string,
      token1: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTotalAmounts(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserFees(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPositions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readjustFrequencyStatus(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readjustLiquidity(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPilotProtocolDetails(
      _recipient: string,
      _pilotPercentage: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleFeesInPilot(
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCoreAddresses(
      oracle_: string,
      ulmState_: string,
      indexFund_: string,
      uniStrategy_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateNewPremium(
      _premium: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePositionTotalAmounts(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      pilotToken: boolean,
      wethToken: boolean,
      liquidity: BigNumberish,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IUnipilotFarmV1Interface extends ethers.utils.Interface {
  functions: {
    "poolInfo(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;

  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;

  events: {};
}

export class IUnipilotFarmV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IUnipilotFarmV1Interface;

  functions: {
    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean
        ] & {
          startBlock: BigNumber;
          globalReward: BigNumber;
          lastRewardBlock: BigNumber;
          totalLockedLiquidity: BigNumber;
          rewardMultiplier: BigNumber;
          isRewardActive: boolean;
          isAltActive: boolean;
        }
      ]
    >;
  };

  poolInfo(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      startBlock: BigNumber;
      globalReward: BigNumber;
      lastRewardBlock: BigNumber;
      totalLockedLiquidity: BigNumber;
      rewardMultiplier: BigNumber;
      isRewardActive: boolean;
      isAltActive: boolean;
    }
  >;

  callStatic: {
    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
        totalLockedLiquidity: BigNumber;
        rewardMultiplier: BigNumber;
        isRewardActive: boolean;
        isAltActive: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    poolInfo(pool: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    poolInfo(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

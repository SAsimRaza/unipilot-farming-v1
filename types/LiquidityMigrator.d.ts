/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LiquidityMigratorInterface extends ethers.utils.Interface {
  functions: {
    "migrateV2Liquidity((address,address,address,address,address,uint24,uint8,uint256,uint256,uint256,bool))": FunctionFragment;
    "migrateV3Liquidity((address,address,address,address,uint24,uint8,uint256,uint256,bool))": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "migrateV2Liquidity",
    values: [
      {
        pair: string;
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        liquidityToMigrate: BigNumberish;
        sqrtPriceX96: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateV3Liquidity",
    values: [
      {
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        uniswapTokenId: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "migrateV2Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateV3Liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;

  events: {};
}

export class LiquidityMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LiquidityMigratorInterface;

  functions: {
    migrateV2Liquidity(
      params: {
        pair: string;
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        liquidityToMigrate: BigNumberish;
        sqrtPriceX96: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrateV3Liquidity(
      params: {
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        uniswapTokenId: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  migrateV2Liquidity(
    params: {
      pair: string;
      liquidityManager: string;
      unipilotAddress: string;
      token0: string;
      token1: string;
      fee: BigNumberish;
      percentageToMigrate: BigNumberish;
      liquidityToMigrate: BigNumberish;
      sqrtPriceX96: BigNumberish;
      unipilotTokenId: BigNumberish;
      refundAsETH: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrateV3Liquidity(
    params: {
      liquidityManager: string;
      unipilotAddress: string;
      token0: string;
      token1: string;
      fee: BigNumberish;
      percentageToMigrate: BigNumberish;
      uniswapTokenId: BigNumberish;
      unipilotTokenId: BigNumberish;
      refundAsETH: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    migrateV2Liquidity(
      params: {
        pair: string;
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        liquidityToMigrate: BigNumberish;
        sqrtPriceX96: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    migrateV3Liquidity(
      params: {
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        uniswapTokenId: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    migrateV2Liquidity(
      params: {
        pair: string;
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        liquidityToMigrate: BigNumberish;
        sqrtPriceX96: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrateV3Liquidity(
      params: {
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        uniswapTokenId: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    migrateV2Liquidity(
      params: {
        pair: string;
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        liquidityToMigrate: BigNumberish;
        sqrtPriceX96: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrateV3Liquidity(
      params: {
        liquidityManager: string;
        unipilotAddress: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
        percentageToMigrate: BigNumberish;
        uniswapTokenId: BigNumberish;
        unipilotTokenId: BigNumberish;
        refundAsETH: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

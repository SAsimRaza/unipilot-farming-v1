/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IULMStateInterface extends ethers.utils.Interface {
  functions: {
    "calculateShare(uint256,uint256)": FunctionFragment;
    "getPoolAddress(address,address,uint24)": FunctionFragment;
    "getPoolDetails(address)": FunctionFragment;
    "getPositionDetails(uint256,address)": FunctionFragment;
    "getTokensOwedAmount(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getUserAndIndexShares(uint256,uint256)": FunctionFragment;
    "shouldReadjust(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateShare",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionDetails",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensOwedAmount",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAndIndexShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldReadjust",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensOwedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAndIndexShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldReadjust",
    data: BytesLike
  ): Result;

  events: {};
}

export class IULMState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IULMStateInterface;

  functions: {
    calculateShare(
      amount: BigNumberish,
      percentageShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    getPoolAddress(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolDetails(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, BigNumber, BigNumber, number] & {
        token0: string;
        token1: string;
        fee: number;
        poolCardinality: number;
        liquidity: BigNumber;
        sqrtPriceX96: BigNumber;
        currentTick: number;
      }
    >;

    getPositionDetails(
      tokenId: BigNumberish,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pool: string;
        token0: string;
        token1: string;
        currentTick: number;
        fee: number;
        liquidity: BigNumber;
        fee0: BigNumber;
        fee1: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    getTokensOwedAmount(
      liquidityManager: string,
      pool: string,
      userLiquidity: BigNumberish,
      feeGrowth0: BigNumberish,
      feeGrowth1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      }
    >;

    getUserAndIndexShares(
      _tokensOwed0: BigNumberish,
      _tokensOwed1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexAmount0: BigNumber;
        indexAmount1: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
      }
    >;

    shouldReadjust(
      pool: string,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  calculateShare(
    amount: BigNumberish,
    percentageShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolAddress(
    token0: string,
    token1: string,
    fee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolDetails(
    pool: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number, BigNumber, BigNumber, number] & {
      token0: string;
      token1: string;
      fee: number;
      poolCardinality: number;
      liquidity: BigNumber;
      sqrtPriceX96: BigNumber;
      currentTick: number;
    }
  >;

  getPositionDetails(
    tokenId: BigNumberish,
    liquidityManagerAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      pool: string;
      token0: string;
      token1: string;
      currentTick: number;
      fee: number;
      liquidity: BigNumber;
      fee0: BigNumber;
      fee1: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      totalLiquidity: BigNumber;
    }
  >;

  getTokensOwedAmount(
    liquidityManager: string,
    pool: string,
    userLiquidity: BigNumberish,
    feeGrowth0: BigNumberish,
    feeGrowth1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tokensOwed0: BigNumber;
      tokensOwed1: BigNumber;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
    }
  >;

  getUserAndIndexShares(
    _tokensOwed0: BigNumberish,
    _tokensOwed1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      indexAmount0: BigNumber;
      indexAmount1: BigNumber;
      userAmount0: BigNumber;
      userAmount1: BigNumber;
    }
  >;

  shouldReadjust(
    pool: string,
    liquidityManagerAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    calculateShare(
      amount: BigNumberish,
      percentageShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAddress(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolDetails(
      pool: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number, BigNumber, BigNumber, number] & {
        token0: string;
        token1: string;
        fee: number;
        poolCardinality: number;
        liquidity: BigNumber;
        sqrtPriceX96: BigNumber;
        currentTick: number;
      }
    >;

    getPositionDetails(
      tokenId: BigNumberish,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        pool: string;
        token0: string;
        token1: string;
        currentTick: number;
        fee: number;
        liquidity: BigNumber;
        fee0: BigNumber;
        fee1: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        totalLiquidity: BigNumber;
      }
    >;

    getTokensOwedAmount(
      liquidityManager: string,
      pool: string,
      userLiquidity: BigNumberish,
      feeGrowth0: BigNumberish,
      feeGrowth1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokensOwed0: BigNumber;
        tokensOwed1: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      }
    >;

    getUserAndIndexShares(
      _tokensOwed0: BigNumberish,
      _tokensOwed1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        indexAmount0: BigNumber;
        indexAmount1: BigNumber;
        userAmount0: BigNumber;
        userAmount1: BigNumber;
      }
    >;

    shouldReadjust(
      pool: string,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    calculateShare(
      amount: BigNumberish,
      percentageShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAddress(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolDetails(pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPositionDetails(
      tokenId: BigNumberish,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensOwedAmount(
      liquidityManager: string,
      pool: string,
      userLiquidity: BigNumberish,
      feeGrowth0: BigNumberish,
      feeGrowth1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAndIndexShares(
      _tokensOwed0: BigNumberish,
      _tokensOwed1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldReadjust(
      pool: string,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateShare(
      amount: BigNumberish,
      percentageShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAddress(
      token0: string,
      token1: string,
      fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolDetails(
      pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionDetails(
      tokenId: BigNumberish,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensOwedAmount(
      liquidityManager: string,
      pool: string,
      userLiquidity: BigNumberish,
      feeGrowth0: BigNumberish,
      feeGrowth1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAndIndexShares(
      _tokensOwed0: BigNumberish,
      _tokensOwed1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldReadjust(
      pool: string,
      liquidityManagerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface UnipilotFarmInterface extends ethers.utils.Interface {
  functions: {
    "backwardCompatible()": FunctionFragment;
    "blacklistPools(address[])": FunctionFragment;
    "currentReward(uint256)": FunctionFragment;
    "depositNFT(uint256)": FunctionFragment;
    "emergencyNFTWithdraw(uint256)": FunctionFragment;
    "farmingActive(uint256)": FunctionFragment;
    "farmingGrowthBlockLimit()": FunctionFragment;
    "getGlobalReward(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "initializer(address[],uint256[])": FunctionFragment;
    "isFarmingActive()": FunctionFragment;
    "migrateFunds(address,address,uint256)": FunctionFragment;
    "nftStatus(uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pilotPerBlock()": FunctionFragment;
    "poolAltInfo(address)": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "poolListed(uint256)": FunctionFragment;
    "poolWhitelist(address)": FunctionFragment;
    "setStake(address)": FunctionFragment;
    "toggleActiveAlt(address)": FunctionFragment;
    "toggleBackwardCompatibility()": FunctionFragment;
    "toggleBooster(uint256)": FunctionFragment;
    "toggleFarmingActive()": FunctionFragment;
    "toggleRewardStatus(address)": FunctionFragment;
    "totalRewardSent()": FunctionFragment;
    "totalUserNftWRTPool(address,address)": FunctionFragment;
    "updateAltToken(address,address)": FunctionFragment;
    "updateFarmingLimit(uint256)": FunctionFragment;
    "updateGovernance(address)": FunctionFragment;
    "updateMultiplier(address,uint256)": FunctionFragment;
    "updatePilotPerBlock(uint256)": FunctionFragment;
    "updateULM(address)": FunctionFragment;
    "userInfo(uint256)": FunctionFragment;
    "userToPoolToTokenIds(address,address,uint256)": FunctionFragment;
    "withdrawNFT(uint256)": FunctionFragment;
    "withdrawReward(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "backwardCompatible",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistPools",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyNFTWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmingGrowthBlockLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalReward",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializer",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isFarmingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pilotPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolAltInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "poolListed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setStake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "toggleActiveAlt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBackwardCompatibility",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleBooster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFarmingActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleRewardStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardSent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserNftWRTPool",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAltToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarmingLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiplier",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePilotPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateULM", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userToPoolToTokenIds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "backwardCompatible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyNFTWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmingGrowthBlockLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFarmingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pilotPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAltInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolListed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleActiveAlt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleBackwardCompatibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleFarmingActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleRewardStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardSent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserNftWRTPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAltToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFarmingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePilotPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateULM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userToPoolToTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "BackwardCompatible(bool,bool)": EventFragment;
    "BlacklistPool(address,bool,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "FarmingStatus(bool,bool,uint256)": EventFragment;
    "GovernanceUpdated(address,address)": EventFragment;
    "MigrateFunds(address,address,uint256)": EventFragment;
    "NewPool(address,uint256,uint256,uint256,bool)": EventFragment;
    "RewardStatus(address,bool,bool)": EventFragment;
    "Stake(address,address)": EventFragment;
    "ToggleBooster(uint256,bool,bool)": EventFragment;
    "UpdateActiveAlt(address,address,address)": EventFragment;
    "UpdateAltState(bool,bool,address)": EventFragment;
    "UpdateFarmingLimit(uint256,uint256)": EventFragment;
    "UpdateMultiplier(address,uint256,uint256)": EventFragment;
    "UpdatePilotPerBlock(address,uint256)": EventFragment;
    "UpdateULM(address,address,uint256)": EventFragment;
    "UserBooster(uint256,uint256)": EventFragment;
    "WithdrawNFT(address,address,uint256,uint256)": EventFragment;
    "WithdrawReward(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BackwardCompatible"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlacklistPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FarmingStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggleBooster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateActiveAlt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAltState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFarmingLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePilotPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateULM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserBooster"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawReward"): EventFragment;
}

export type BackwardCompatibleEvent = TypedEvent<
  [boolean, boolean] & { old: boolean; updated: boolean }
>;

export type BlacklistPoolEvent = TypedEvent<
  [string, boolean, BigNumber] & {
    pool: string;
    status: boolean;
    time: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    tokenId: BigNumber;
    liquidity: BigNumber;
    totalSupply: BigNumber;
    globalReward: BigNumber;
    rewardMultiplier: BigNumber;
    rewardPerBlock: BigNumber;
  }
>;

export type FarmingStatusEvent = TypedEvent<
  [boolean, boolean, BigNumber] & {
    old: boolean;
    updated: boolean;
    time: BigNumber;
  }
>;

export type GovernanceUpdatedEvent = TypedEvent<
  [string, string] & { old: string; updated: string }
>;

export type MigrateFundsEvent = TypedEvent<
  [string, string, BigNumber] & {
    account: string;
    token: string;
    amount: BigNumber;
  }
>;

export type NewPoolEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean] & {
    pool: string;
    rewardPerBlock: BigNumber;
    rewardMultiplier: BigNumber;
    lastRewardBlock: BigNumber;
    status: boolean;
  }
>;

export type RewardStatusEvent = TypedEvent<
  [string, boolean, boolean] & { pool: string; old: boolean; updated: boolean }
>;

export type StakeEvent = TypedEvent<
  [string, string] & { old: string; updated: string }
>;

export type ToggleBoosterEvent = TypedEvent<
  [BigNumber, boolean, boolean] & {
    tokenId: BigNumber;
    old: boolean;
    updated: boolean;
  }
>;

export type UpdateActiveAltEvent = TypedEvent<
  [string, string, string] & { old: string; updated: string; pool: string }
>;

export type UpdateAltStateEvent = TypedEvent<
  [boolean, boolean, string] & { old: boolean; updated: boolean; pool: string }
>;

export type UpdateFarmingLimitEvent = TypedEvent<
  [BigNumber, BigNumber] & { old: BigNumber; updated: BigNumber }
>;

export type UpdateMultiplierEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    pool: string;
    old: BigNumber;
    updated: BigNumber;
  }
>;

export type UpdatePilotPerBlockEvent = TypedEvent<
  [string, BigNumber] & { pool: string; updated: BigNumber }
>;

export type UpdateULMEvent = TypedEvent<
  [string, string, BigNumber] & {
    oldAddress: string;
    newAddress: string;
    time: BigNumber;
  }
>;

export type UserBoosterEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; booster: BigNumber }
>;

export type WithdrawNFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    pool: string;
    userAddress: string;
    tokenId: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type WithdrawRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    pool: string;
    tokenId: BigNumber;
    liquidity: BigNumber;
    reward: BigNumber;
    globalReward: BigNumber;
    totalSupply: BigNumber;
    lastRewardTransferred: BigNumber;
  }
>;

export class UnipilotFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UnipilotFarmInterface;

  functions: {
    backwardCompatible(overrides?: CallOverrides): Promise<[boolean]>;

    blacklistPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pilotReward: BigNumber;
        globalReward: BigNumber;
        globalAltReward: BigNumber;
        altReward: BigNumber;
      }
    >;

    depositNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyNFTWithdraw(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    farmingActive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalReward(
      pool: string,
      blockDifference: BigNumberish,
      rewardPerBlock: BigNumberish,
      multiplier: BigNumberish,
      _globalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { globalReward: BigNumber }>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    initializer(
      _pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isFarmingActive(overrides?: CallOverrides): Promise<[boolean]>;

    migrateFunds(
      _newContract: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftStatus(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pilotPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        altToken: string;
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
        totalLockedLiquidity: BigNumber;
        rewardMultiplier: BigNumber;
        isRewardActive: boolean;
        isAltActive: boolean;
      }
    >;

    poolListed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleActiveAlt(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleBackwardCompatibility(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleBooster(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRewardStatus(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalRewardSent(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserNftWRTPool(
      _user: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        tokenCount: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    updateAltToken(
      _pool: string,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMultiplier(
      _pool: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePilotPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateULM(
      _ulm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        boosterActive: boolean;
        pool: string;
        user: string;
        reward: BigNumber;
        altReward: BigNumber;
        liquidity: BigNumber;
      }
    >;

    userToPoolToTokenIds(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawReward(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  backwardCompatible(overrides?: CallOverrides): Promise<boolean>;

  blacklistPools(
    _pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentReward(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      pilotReward: BigNumber;
      globalReward: BigNumber;
      globalAltReward: BigNumber;
      altReward: BigNumber;
    }
  >;

  depositNFT(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyNFTWithdraw(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  farmingActive(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalReward(
    pool: string,
    blockDifference: BigNumberish,
    rewardPerBlock: BigNumberish,
    multiplier: BigNumberish,
    _globalReward: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  initializer(
    _pools: string[],
    _multipliers: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isFarmingActive(overrides?: CallOverrides): Promise<boolean>;

  migrateFunds(
    _newContract: string,
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftStatus(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pilotPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  poolAltInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      altToken: string;
      startBlock: BigNumber;
      globalReward: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      startBlock: BigNumber;
      globalReward: BigNumber;
      lastRewardBlock: BigNumber;
      totalLockedLiquidity: BigNumber;
      rewardMultiplier: BigNumber;
      isRewardActive: boolean;
      isAltActive: boolean;
    }
  >;

  poolListed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  poolWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setStake(
    _stakeContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleActiveAlt(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleBackwardCompatibility(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleBooster(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleFarmingActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRewardStatus(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalRewardSent(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserNftWRTPool(
    _user: string,
    _pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[]] & { tokenCount: BigNumber; tokenIds: BigNumber[] }
  >;

  updateAltToken(
    _pool: string,
    _altToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFarmingLimit(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMultiplier(
    _pool: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePilotPerBlock(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateULM(
    _ulm: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string, BigNumber, BigNumber, BigNumber] & {
      boosterActive: boolean;
      pool: string;
      user: string;
      reward: BigNumber;
      altReward: BigNumber;
      liquidity: BigNumber;
    }
  >;

  userToPoolToTokenIds(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawNFT(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawReward(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    backwardCompatible(overrides?: CallOverrides): Promise<boolean>;

    blacklistPools(_pools: string[], overrides?: CallOverrides): Promise<void>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        pilotReward: BigNumber;
        globalReward: BigNumber;
        globalAltReward: BigNumber;
        altReward: BigNumber;
      }
    >;

    depositNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyNFTWithdraw(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmingActive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalReward(
      pool: string,
      blockDifference: BigNumberish,
      rewardPerBlock: BigNumberish,
      multiplier: BigNumberish,
      _globalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    initializer(
      _pools: string[],
      _multipliers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isFarmingActive(overrides?: CallOverrides): Promise<boolean>;

    migrateFunds(
      _newContract: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftStatus(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pilotPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    poolAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        altToken: string;
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        startBlock: BigNumber;
        globalReward: BigNumber;
        lastRewardBlock: BigNumber;
        totalLockedLiquidity: BigNumber;
        rewardMultiplier: BigNumber;
        isRewardActive: boolean;
        isAltActive: boolean;
      }
    >;

    poolListed(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    poolWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setStake(_stakeContract: string, overrides?: CallOverrides): Promise<void>;

    toggleActiveAlt(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    toggleBackwardCompatibility(overrides?: CallOverrides): Promise<void>;

    toggleBooster(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleFarmingActive(overrides?: CallOverrides): Promise<void>;

    toggleRewardStatus(_pool: string, overrides?: CallOverrides): Promise<void>;

    totalRewardSent(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserNftWRTPool(
      _user: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        tokenCount: BigNumber;
        tokenIds: BigNumber[];
      }
    >;

    updateAltToken(
      _pool: string,
      _altToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiplier(
      _pool: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePilotPerBlock(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateULM(_ulm: string, overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        boosterActive: boolean;
        pool: string;
        user: string;
        reward: BigNumber;
        altReward: BigNumber;
        liquidity: BigNumber;
      }
    >;

    userToPoolToTokenIds(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BackwardCompatible(bool,bool)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[boolean, boolean], { old: boolean; updated: boolean }>;

    BackwardCompatible(
      old?: null,
      updated?: null
    ): TypedEventFilter<[boolean, boolean], { old: boolean; updated: boolean }>;

    "BlacklistPool(address,bool,uint256)"(
      pool?: null,
      status?: null,
      time?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { pool: string; status: boolean; time: BigNumber }
    >;

    BlacklistPool(
      pool?: null,
      status?: null,
      time?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber],
      { pool: string; status: boolean; time: BigNumber }
    >;

    "Deposit(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      totalSupply?: null,
      globalReward?: null,
      rewardMultiplier?: null,
      rewardPerBlock?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        totalSupply: BigNumber;
        globalReward: BigNumber;
        rewardMultiplier: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    Deposit(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      totalSupply?: null,
      globalReward?: null,
      rewardMultiplier?: null,
      rewardPerBlock?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        totalSupply: BigNumber;
        globalReward: BigNumber;
        rewardMultiplier: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    "FarmingStatus(bool,bool,uint256)"(
      old?: null,
      updated?: null,
      time?: null
    ): TypedEventFilter<
      [boolean, boolean, BigNumber],
      { old: boolean; updated: boolean; time: BigNumber }
    >;

    FarmingStatus(
      old?: null,
      updated?: null,
      time?: null
    ): TypedEventFilter<
      [boolean, boolean, BigNumber],
      { old: boolean; updated: boolean; time: BigNumber }
    >;

    "GovernanceUpdated(address,address)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    GovernanceUpdated(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    "MigrateFunds(address,address,uint256)"(
      account?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; token: string; amount: BigNumber }
    >;

    MigrateFunds(
      account?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; token: string; amount: BigNumber }
    >;

    "NewPool(address,uint256,uint256,uint256,bool)"(
      pool?: null,
      rewardPerBlock?: null,
      rewardMultiplier?: null,
      lastRewardBlock?: null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, boolean],
      {
        pool: string;
        rewardPerBlock: BigNumber;
        rewardMultiplier: BigNumber;
        lastRewardBlock: BigNumber;
        status: boolean;
      }
    >;

    NewPool(
      pool?: null,
      rewardPerBlock?: null,
      rewardMultiplier?: null,
      lastRewardBlock?: null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, boolean],
      {
        pool: string;
        rewardPerBlock: BigNumber;
        rewardMultiplier: BigNumber;
        lastRewardBlock: BigNumber;
        status: boolean;
      }
    >;

    "RewardStatus(address,bool,bool)"(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { pool: string; old: boolean; updated: boolean }
    >;

    RewardStatus(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { pool: string; old: boolean; updated: boolean }
    >;

    "Stake(address,address)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    Stake(
      old?: null,
      updated?: null
    ): TypedEventFilter<[string, string], { old: string; updated: string }>;

    "ToggleBooster(uint256,bool,bool)"(
      tokenId?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, boolean, boolean],
      { tokenId: BigNumber; old: boolean; updated: boolean }
    >;

    ToggleBooster(
      tokenId?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, boolean, boolean],
      { tokenId: BigNumber; old: boolean; updated: boolean }
    >;

    "UpdateActiveAlt(address,address,address)"(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [string, string, string],
      { old: string; updated: string; pool: string }
    >;

    UpdateActiveAlt(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [string, string, string],
      { old: string; updated: string; pool: string }
    >;

    "UpdateAltState(bool,bool,address)"(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [boolean, boolean, string],
      { old: boolean; updated: boolean; pool: string }
    >;

    UpdateAltState(
      old?: null,
      updated?: null,
      pool?: null
    ): TypedEventFilter<
      [boolean, boolean, string],
      { old: boolean; updated: boolean; pool: string }
    >;

    "UpdateFarmingLimit(uint256,uint256)"(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    UpdateFarmingLimit(
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { old: BigNumber; updated: BigNumber }
    >;

    "UpdateMultiplier(address,uint256,uint256)"(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { pool: string; old: BigNumber; updated: BigNumber }
    >;

    UpdateMultiplier(
      pool?: null,
      old?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { pool: string; old: BigNumber; updated: BigNumber }
    >;

    "UpdatePilotPerBlock(address,uint256)"(
      pool?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; updated: BigNumber }
    >;

    UpdatePilotPerBlock(
      pool?: null,
      updated?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { pool: string; updated: BigNumber }
    >;

    "UpdateULM(address,address,uint256)"(
      oldAddress?: null,
      newAddress?: null,
      time?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oldAddress: string; newAddress: string; time: BigNumber }
    >;

    UpdateULM(
      oldAddress?: null,
      newAddress?: null,
      time?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oldAddress: string; newAddress: string; time: BigNumber }
    >;

    "UserBooster(uint256,uint256)"(
      tokenId?: null,
      booster?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; booster: BigNumber }
    >;

    UserBooster(
      tokenId?: null,
      booster?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; booster: BigNumber }
    >;

    "WithdrawNFT(address,address,uint256,uint256)"(
      pool?: null,
      userAddress?: null,
      tokenId?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        pool: string;
        userAddress: string;
        tokenId: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    WithdrawNFT(
      pool?: null,
      userAddress?: null,
      tokenId?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        pool: string;
        userAddress: string;
        tokenId: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "WithdrawReward(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      reward?: null,
      globalReward?: null,
      totalSupply?: null,
      lastRewardTransferred?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        reward: BigNumber;
        globalReward: BigNumber;
        totalSupply: BigNumber;
        lastRewardTransferred: BigNumber;
      }
    >;

    WithdrawReward(
      pool?: null,
      tokenId?: null,
      liquidity?: null,
      reward?: null,
      globalReward?: null,
      totalSupply?: null,
      lastRewardTransferred?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        pool: string;
        tokenId: BigNumber;
        liquidity: BigNumber;
        reward: BigNumber;
        globalReward: BigNumber;
        totalSupply: BigNumber;
        lastRewardTransferred: BigNumber;
      }
    >;
  };

  estimateGas: {
    backwardCompatible(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyNFTWithdraw(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    farmingActive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmingGrowthBlockLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalReward(
      pool: string,
      blockDifference: BigNumberish,
      rewardPerBlock: BigNumberish,
      multiplier: BigNumberish,
      _globalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    initializer(
      _pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isFarmingActive(overrides?: CallOverrides): Promise<BigNumber>;

    migrateFunds(
      _newContract: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftStatus(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pilotPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    poolAltInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    poolListed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleActiveAlt(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleBackwardCompatibility(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleBooster(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRewardStatus(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalRewardSent(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserNftWRTPool(
      _user: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAltToken(
      _pool: string,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMultiplier(
      _pool: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePilotPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateULM(
      _ulm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    userToPoolToTokenIds(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawReward(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    backwardCompatible(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistPools(
      _pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentReward(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyNFTWithdraw(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    farmingActive(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmingGrowthBlockLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalReward(
      pool: string,
      blockDifference: BigNumberish,
      rewardPerBlock: BigNumberish,
      multiplier: BigNumberish,
      _globalReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializer(
      _pools: string[],
      _multipliers: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isFarmingActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateFunds(
      _newContract: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftStatus(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pilotPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAltInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolListed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStake(
      _stakeContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleActiveAlt(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleBackwardCompatibility(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleBooster(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleFarmingActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRewardStatus(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalRewardSent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUserNftWRTPool(
      _user: string,
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAltToken(
      _pool: string,
      _altToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFarmingLimit(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMultiplier(
      _pool: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePilotPerBlock(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateULM(
      _ulm: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToPoolToTokenIds(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawReward(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
